# Generated by Gemma 2B via Ollama

class Solution:
    def minimumVisitedCells(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])

        # Initialize a visited array to track cells that have been visited
        visited = [[False for _ in range(n)] for _ in range(m)]
        queue = [(0, 0)]

        # Set the starting cell to visited
        visited[0][0] = True

        # Perform a breadth-first search to find the shortest path
        while queue:
            x, y = *queue.pop(0)
            if x == m - 1 and y == n - 1:
                return len(queue)
            if not visited[x][y]:
                visited[x][y] = True
                queue.append((x + 1, y))
                queue.append((x - 1, y))
                queue.append((x, y + 1))
                queue.append((x, y - 1))
        return -1

