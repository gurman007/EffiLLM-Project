# Generated by Gemma 2B via Ollama

class Solution:
    def cheapestJump(self, coins: List[int], maxJump: int) -> List[int]:
        n = len(coins)

        # dp=[[float('inf')]*(maxJump+1) for _ in range(n+1)]
        dp = [[float('inf')]*(maxJump+1) for _ in range(n+1)]
        dp[1][0] = 0
        
        for i in range(2, n+1):
            for j in range(1, maxJump+1):
                if coins[i] != -1:
                    dp[i][j] = min(dp[i-1][j], dp[i-1][j-coins[i]])
                else:
                    dp[i][j] = dp[i-1][j]

        # return the minimal path from index 1 to n
        return [i for i, v in dp[1].items() if v == min(dp[1].items())]

