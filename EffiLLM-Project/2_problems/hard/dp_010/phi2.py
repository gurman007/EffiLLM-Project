# Generated by Phi-2 via Ollama

class Solution:
def maxProduct(self, nums1: List[int], nums2: List[int]) -> int:
	"""
	Time Complexity: O(n)
	Space Complexity: O(1)
	"""
	# Your code here.
	nums1 = sorted(nums1, reverse=True) # Sort the first array in descending order to ensure that when we multiply two negative numbers, their product is positive.
	nums2 = sorted(nums2, reverse=True)
	result = -float('inf')  # Initialize result as negative infinity.
	for i in range(len(nums1)): # Loop through the first array
		temp_product = nums1[i] * nums2[0] # Multiply the current number from the first array with the first number from the second array.
		result = max(result, temp_product)  # Update result as the maximum between the current value and the previous maximum.
	return result # Return the maximum product.
