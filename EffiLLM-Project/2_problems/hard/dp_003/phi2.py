# Generated by Phi-2 via Ollama

class Solution:
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    """
    Created on Mon Oct 27 14:07:55 2019

    @author: jinchoiseoul@gmail.com
    https://leetcode.com/problems/count-sequences/solution/

    Difficulty: Medium
    Question: https://leetcode.com/problems/count-sequences/
    """

    class Solution(object):
        def dieSimulator(self, n, rollMax):
            import itertools

            rollMax = [i + 1 for i in rollMax] # to make it 0-indexed

            # compute possible combinations of rolling the dice one by one (i.e., 2 rolls), 3 rolls and so on up to n rolls
            possible_combinations = []
            for num_rolls in range(n + 1):
                possible_sequences = list(itertools.product(*[(1, 6) for _ in range(num_rolls)]))
                possible_combinations += possible_sequences

            # filter out sequences that are not valid (i.e., more than `n` rolls have the same number consecutively)
            valid_sequences = []
            for sequence in possible_combinations:
                last_num = None # last number rolled in a sequence
                seq_len = 0 # length of the current sequence
                for num in sequence:
                    if num == last_num:
                        seq_len += 1
                        if seq_len > rollMax[last_num - 1]:
                            break 
                    else:
                        seq_len = 1
                    if seq_len == n: # found the desired sequences!
                        valid_sequences.append(sequence)
                    last_num = num

            # return the number of valid sequences modulo 10^9 + 7
            return len(valid_sequences) % (10**9 + 7) 


    import timeit
    from random import randint
    import cProfile, pstats

    n = 2 # The number of rolls.
    rollMax = [1, 1, 2, 2, 2, 3]
    solution = Solution()
    t0 = timeit.default_timer()
    print(timeit.Timer(lambda: solution.dieSimulator(n, rollMax)).timeit(1000))
    t1 = timeit.default_timer()
    print('Time: ', t1 - t0)
