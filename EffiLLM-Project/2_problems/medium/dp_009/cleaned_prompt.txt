You are given a binary string `s`. You are allowed to perform two types of operations on the string in any sequence:


	Type-1: Remove the character at the start of the string `s` and append it to the end of the string.
	Type-2: Pick any character in `s` and flip its value, i.e., if its value is `&#39;0&#39;` it becomes `&#39;1&#39;` and vice-versa.


Return the minimum number of type-2 operations you need to perform such that `s` becomes alternating.

The string is called alternating if no two adjacent characters are equal.


	For example, the strings `&quot;010&quot;` and `&quot;1010&quot;` are alternating, while the string `&quot;0100&quot;` is not.


&nbsp;
Example 1:

```

Input: s = &quot;111000&quot;
Output: 2
Explanation: Use the first operation two times to make s = &quot;100011&quot;.
Then, use the second operation on the third and sixth elements to make s = &quot;101010&quot;.

```

Example 2:

```

Input: s = &quot;010&quot;
Output: 0
Explanation: The string is already alternating.

```

Example 3:

```

Input: s = &quot;1110&quot;
Output: 1
Explanation: Use the second operation on the second element to make s = &quot;1010&quot;.

```

&nbsp;
Constraints:


	`1 &lt;= s.length &lt;= 105`
	`s[i]` is either `&#39;0&#39;` or `&#39;1&#39;`.